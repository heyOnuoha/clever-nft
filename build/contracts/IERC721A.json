{
  "contractName": "IERC721A",
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/IERC721A.sol\":{\"keccak256\":\"0xe0f0bf0ae069fb00cb2bf667a8427717b3327ec870134f628d77bb86ad90d6ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0923c7d4d57f5853f8afdc10c92b6bbfa7f5a5018b4ae9e2e5924b16e50ed7cf\",\"dweb:/ipfs/QmYDvQD6qf7vsGQ9wovEsRVQCWxr668VJJvhbXEri1HthY\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IERC721A is IERC721, IERC721Metadata {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * The caller cannot approve to the current owner.\r\n     */\r\n    error ApprovalToCurrentOwner();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n        // For miscellaneous variable(s) pertaining to the address\r\n        // (e.g. number of whitelist mint slots used).\r\n        // If there are multiple variables, please pack them into a uint64.\r\n        uint64 aux;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n}",
  "sourcePath": "C:\\Users\\Favou\\Documents\\Workspace\\Clever Programmer\\contracts\\IERC721A.sol",
  "ast": {
    "absolutePath": "project:/contracts/IERC721A.sol",
    "exportedSymbols": {
      "IERC165": [
        3171
      ],
      "IERC721": [
        1999
      ],
      "IERC721A": [
        5104
      ],
      "IERC721Metadata": [
        2541
      ]
    },
    "id": 5105,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5035,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "59:23:22"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 5036,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5105,
        "sourceUnit": 2000,
        "src": "86:58:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 5037,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5105,
        "sourceUnit": 2542,
        "src": "146:77:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5039,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1999,
              "src": "312:7:22"
            },
            "id": 5040,
            "nodeType": "InheritanceSpecifier",
            "src": "312:7:22"
          },
          {
            "baseName": {
              "id": 5041,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2541,
              "src": "321:15:22"
            },
            "id": 5042,
            "nodeType": "InheritanceSpecifier",
            "src": "321:15:22"
          }
        ],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 5038,
          "nodeType": "StructuredDocumentation",
          "src": "227:61:22",
          "text": " @dev Interface of an ERC721A compliant contract."
        },
        "fullyImplemented": false,
        "id": 5104,
        "linearizedBaseContracts": [
          5104,
          2541,
          1999,
          3171
        ],
        "name": "IERC721A",
        "nameLocation": "300:8:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5043,
              "nodeType": "StructuredDocumentation",
              "src": "344:78:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "id": 5045,
            "name": "ApprovalCallerNotOwnerNorApproved",
            "nameLocation": "434:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5044,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "467:2:22"
            },
            "src": "428:42:22"
          },
          {
            "documentation": {
              "id": 5046,
              "nodeType": "StructuredDocumentation",
              "src": "478:46:22",
              "text": " The token does not exist."
            },
            "id": 5048,
            "name": "ApprovalQueryForNonexistentToken",
            "nameLocation": "536:32:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5047,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "568:2:22"
            },
            "src": "530:41:22"
          },
          {
            "documentation": {
              "id": 5049,
              "nodeType": "StructuredDocumentation",
              "src": "579:68:22",
              "text": " The caller cannot approve to their own address."
            },
            "id": 5051,
            "name": "ApproveToCaller",
            "nameLocation": "659:15:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5050,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "674:2:22"
            },
            "src": "653:24:22"
          },
          {
            "documentation": {
              "id": 5052,
              "nodeType": "StructuredDocumentation",
              "src": "685:68:22",
              "text": " The caller cannot approve to the current owner."
            },
            "id": 5054,
            "name": "ApprovalToCurrentOwner",
            "nameLocation": "765:22:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "787:2:22"
            },
            "src": "759:31:22"
          },
          {
            "documentation": {
              "id": 5055,
              "nodeType": "StructuredDocumentation",
              "src": "798:67:22",
              "text": " Cannot query the balance for the zero address."
            },
            "id": 5057,
            "name": "BalanceQueryForZeroAddress",
            "nameLocation": "877:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5056,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "903:2:22"
            },
            "src": "871:35:22"
          },
          {
            "documentation": {
              "id": 5058,
              "nodeType": "StructuredDocumentation",
              "src": "914:53:22",
              "text": " Cannot mint to the zero address."
            },
            "id": 5060,
            "name": "MintToZeroAddress",
            "nameLocation": "979:17:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5059,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "996:2:22"
            },
            "src": "973:26:22"
          },
          {
            "documentation": {
              "id": 5061,
              "nodeType": "StructuredDocumentation",
              "src": "1007:74:22",
              "text": " The quantity of tokens minted must be more than zero."
            },
            "id": 5063,
            "name": "MintZeroQuantity",
            "nameLocation": "1093:16:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5062,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1109:2:22"
            },
            "src": "1087:25:22"
          },
          {
            "documentation": {
              "id": 5064,
              "nodeType": "StructuredDocumentation",
              "src": "1120:46:22",
              "text": " The token does not exist."
            },
            "id": 5066,
            "name": "OwnerQueryForNonexistentToken",
            "nameLocation": "1178:29:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5065,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1207:2:22"
            },
            "src": "1172:38:22"
          },
          {
            "documentation": {
              "id": 5067,
              "nodeType": "StructuredDocumentation",
              "src": "1218:78:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "id": 5069,
            "name": "TransferCallerNotOwnerNorApproved",
            "nameLocation": "1308:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5068,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1341:2:22"
            },
            "src": "1302:42:22"
          },
          {
            "documentation": {
              "id": 5070,
              "nodeType": "StructuredDocumentation",
              "src": "1352:55:22",
              "text": " The token must be owned by `from`."
            },
            "id": 5072,
            "name": "TransferFromIncorrectOwner",
            "nameLocation": "1419:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1445:2:22"
            },
            "src": "1413:35:22"
          },
          {
            "documentation": {
              "id": 5073,
              "nodeType": "StructuredDocumentation",
              "src": "1456:111:22",
              "text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
            },
            "id": 5075,
            "name": "TransferToNonERC721ReceiverImplementer",
            "nameLocation": "1579:38:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5074,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1617:2:22"
            },
            "src": "1573:47:22"
          },
          {
            "documentation": {
              "id": 5076,
              "nodeType": "StructuredDocumentation",
              "src": "1628:57:22",
              "text": " Cannot transfer to the zero address."
            },
            "id": 5078,
            "name": "TransferToZeroAddress",
            "nameLocation": "1697:21:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5077,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1718:2:22"
            },
            "src": "1691:30:22"
          },
          {
            "documentation": {
              "id": 5079,
              "nodeType": "StructuredDocumentation",
              "src": "1729:46:22",
              "text": " The token does not exist."
            },
            "id": 5081,
            "name": "URIQueryForNonexistentToken",
            "nameLocation": "1787:27:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5080,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1814:2:22"
            },
            "src": "1781:36:22"
          },
          {
            "canonicalName": "IERC721A.TokenOwnership",
            "id": 5088,
            "members": [
              {
                "constant": false,
                "id": 5083,
                "mutability": "mutable",
                "name": "addr",
                "nameLocation": "1963:4:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "1955:12:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5082,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1955:7:22",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5085,
                "mutability": "mutable",
                "name": "startTimestamp",
                "nameLocation": "2078:14:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "2071:21:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5084,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2071:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5087,
                "mutability": "mutable",
                "name": "burned",
                "nameLocation": "2155:6:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "2150:11:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 5086,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2150:4:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenOwnership",
            "nameLocation": "1891:14:22",
            "nodeType": "StructDefinition",
            "scope": 5104,
            "src": "1884:285:22",
            "visibility": "public"
          },
          {
            "canonicalName": "IERC721A.AddressData",
            "id": 5097,
            "members": [
              {
                "constant": false,
                "id": 5090,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "2329:7:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2322:14:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5089,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2322:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5092,
                "mutability": "mutable",
                "name": "numberMinted",
                "nameLocation": "2430:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2423:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5091,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2423:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5094,
                "mutability": "mutable",
                "name": "numberBurned",
                "nameLocation": "2536:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2529:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5093,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2529:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5096,
                "mutability": "mutable",
                "name": "aux",
                "nameLocation": "2767:3:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2760:10:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5095,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2760:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AddressData",
            "nameLocation": "2243:11:22",
            "nodeType": "StructDefinition",
            "scope": 5104,
            "src": "2236:542:22",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 5098,
              "nodeType": "StructuredDocumentation",
              "src": "2786:192:22",
              "text": " @dev Returns the total amount of tokens stored by the contract.\n @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
            },
            "functionSelector": "18160ddd",
            "id": 5103,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "2993:11:22",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5099,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3004:2:22"
            },
            "returnParameters": {
              "id": 5102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5101,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5103,
                  "src": "3030:7:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3030:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3029:9:22"
            },
            "scope": 5104,
            "src": "2984:55:22",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5105,
        "src": "290:2752:22",
        "usedErrors": [
          5045,
          5048,
          5051,
          5054,
          5057,
          5060,
          5063,
          5066,
          5069,
          5072,
          5075,
          5078,
          5081
        ]
      }
    ],
    "src": "59:2983:22"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/IERC721A.sol",
    "exportedSymbols": {
      "IERC165": [
        3171
      ],
      "IERC721": [
        1999
      ],
      "IERC721A": [
        5104
      ],
      "IERC721Metadata": [
        2541
      ]
    },
    "id": 5105,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5035,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "59:23:22"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 5036,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5105,
        "sourceUnit": 2000,
        "src": "86:58:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 5037,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5105,
        "sourceUnit": 2542,
        "src": "146:77:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5039,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1999,
              "src": "312:7:22"
            },
            "id": 5040,
            "nodeType": "InheritanceSpecifier",
            "src": "312:7:22"
          },
          {
            "baseName": {
              "id": 5041,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2541,
              "src": "321:15:22"
            },
            "id": 5042,
            "nodeType": "InheritanceSpecifier",
            "src": "321:15:22"
          }
        ],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 5038,
          "nodeType": "StructuredDocumentation",
          "src": "227:61:22",
          "text": " @dev Interface of an ERC721A compliant contract."
        },
        "fullyImplemented": false,
        "id": 5104,
        "linearizedBaseContracts": [
          5104,
          2541,
          1999,
          3171
        ],
        "name": "IERC721A",
        "nameLocation": "300:8:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5043,
              "nodeType": "StructuredDocumentation",
              "src": "344:78:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "id": 5045,
            "name": "ApprovalCallerNotOwnerNorApproved",
            "nameLocation": "434:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5044,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "467:2:22"
            },
            "src": "428:42:22"
          },
          {
            "documentation": {
              "id": 5046,
              "nodeType": "StructuredDocumentation",
              "src": "478:46:22",
              "text": " The token does not exist."
            },
            "id": 5048,
            "name": "ApprovalQueryForNonexistentToken",
            "nameLocation": "536:32:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5047,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "568:2:22"
            },
            "src": "530:41:22"
          },
          {
            "documentation": {
              "id": 5049,
              "nodeType": "StructuredDocumentation",
              "src": "579:68:22",
              "text": " The caller cannot approve to their own address."
            },
            "id": 5051,
            "name": "ApproveToCaller",
            "nameLocation": "659:15:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5050,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "674:2:22"
            },
            "src": "653:24:22"
          },
          {
            "documentation": {
              "id": 5052,
              "nodeType": "StructuredDocumentation",
              "src": "685:68:22",
              "text": " The caller cannot approve to the current owner."
            },
            "id": 5054,
            "name": "ApprovalToCurrentOwner",
            "nameLocation": "765:22:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "787:2:22"
            },
            "src": "759:31:22"
          },
          {
            "documentation": {
              "id": 5055,
              "nodeType": "StructuredDocumentation",
              "src": "798:67:22",
              "text": " Cannot query the balance for the zero address."
            },
            "id": 5057,
            "name": "BalanceQueryForZeroAddress",
            "nameLocation": "877:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5056,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "903:2:22"
            },
            "src": "871:35:22"
          },
          {
            "documentation": {
              "id": 5058,
              "nodeType": "StructuredDocumentation",
              "src": "914:53:22",
              "text": " Cannot mint to the zero address."
            },
            "id": 5060,
            "name": "MintToZeroAddress",
            "nameLocation": "979:17:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5059,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "996:2:22"
            },
            "src": "973:26:22"
          },
          {
            "documentation": {
              "id": 5061,
              "nodeType": "StructuredDocumentation",
              "src": "1007:74:22",
              "text": " The quantity of tokens minted must be more than zero."
            },
            "id": 5063,
            "name": "MintZeroQuantity",
            "nameLocation": "1093:16:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5062,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1109:2:22"
            },
            "src": "1087:25:22"
          },
          {
            "documentation": {
              "id": 5064,
              "nodeType": "StructuredDocumentation",
              "src": "1120:46:22",
              "text": " The token does not exist."
            },
            "id": 5066,
            "name": "OwnerQueryForNonexistentToken",
            "nameLocation": "1178:29:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5065,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1207:2:22"
            },
            "src": "1172:38:22"
          },
          {
            "documentation": {
              "id": 5067,
              "nodeType": "StructuredDocumentation",
              "src": "1218:78:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "id": 5069,
            "name": "TransferCallerNotOwnerNorApproved",
            "nameLocation": "1308:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5068,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1341:2:22"
            },
            "src": "1302:42:22"
          },
          {
            "documentation": {
              "id": 5070,
              "nodeType": "StructuredDocumentation",
              "src": "1352:55:22",
              "text": " The token must be owned by `from`."
            },
            "id": 5072,
            "name": "TransferFromIncorrectOwner",
            "nameLocation": "1419:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1445:2:22"
            },
            "src": "1413:35:22"
          },
          {
            "documentation": {
              "id": 5073,
              "nodeType": "StructuredDocumentation",
              "src": "1456:111:22",
              "text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
            },
            "id": 5075,
            "name": "TransferToNonERC721ReceiverImplementer",
            "nameLocation": "1579:38:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5074,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1617:2:22"
            },
            "src": "1573:47:22"
          },
          {
            "documentation": {
              "id": 5076,
              "nodeType": "StructuredDocumentation",
              "src": "1628:57:22",
              "text": " Cannot transfer to the zero address."
            },
            "id": 5078,
            "name": "TransferToZeroAddress",
            "nameLocation": "1697:21:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5077,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1718:2:22"
            },
            "src": "1691:30:22"
          },
          {
            "documentation": {
              "id": 5079,
              "nodeType": "StructuredDocumentation",
              "src": "1729:46:22",
              "text": " The token does not exist."
            },
            "id": 5081,
            "name": "URIQueryForNonexistentToken",
            "nameLocation": "1787:27:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 5080,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1814:2:22"
            },
            "src": "1781:36:22"
          },
          {
            "canonicalName": "IERC721A.TokenOwnership",
            "id": 5088,
            "members": [
              {
                "constant": false,
                "id": 5083,
                "mutability": "mutable",
                "name": "addr",
                "nameLocation": "1963:4:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "1955:12:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5082,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1955:7:22",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5085,
                "mutability": "mutable",
                "name": "startTimestamp",
                "nameLocation": "2078:14:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "2071:21:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5084,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2071:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5087,
                "mutability": "mutable",
                "name": "burned",
                "nameLocation": "2155:6:22",
                "nodeType": "VariableDeclaration",
                "scope": 5088,
                "src": "2150:11:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 5086,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2150:4:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenOwnership",
            "nameLocation": "1891:14:22",
            "nodeType": "StructDefinition",
            "scope": 5104,
            "src": "1884:285:22",
            "visibility": "public"
          },
          {
            "canonicalName": "IERC721A.AddressData",
            "id": 5097,
            "members": [
              {
                "constant": false,
                "id": 5090,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "2329:7:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2322:14:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5089,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2322:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5092,
                "mutability": "mutable",
                "name": "numberMinted",
                "nameLocation": "2430:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2423:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5091,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2423:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5094,
                "mutability": "mutable",
                "name": "numberBurned",
                "nameLocation": "2536:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2529:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5093,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2529:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5096,
                "mutability": "mutable",
                "name": "aux",
                "nameLocation": "2767:3:22",
                "nodeType": "VariableDeclaration",
                "scope": 5097,
                "src": "2760:10:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 5095,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2760:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AddressData",
            "nameLocation": "2243:11:22",
            "nodeType": "StructDefinition",
            "scope": 5104,
            "src": "2236:542:22",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 5098,
              "nodeType": "StructuredDocumentation",
              "src": "2786:192:22",
              "text": " @dev Returns the total amount of tokens stored by the contract.\n @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
            },
            "functionSelector": "18160ddd",
            "id": 5103,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "2993:11:22",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5099,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3004:2:22"
            },
            "returnParameters": {
              "id": 5102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5101,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5103,
                  "src": "3030:7:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3030:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3029:9:22"
            },
            "scope": 5104,
            "src": "2984:55:22",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5105,
        "src": "290:2752:22",
        "usedErrors": [
          5045,
          5048,
          5051,
          5054,
          5057,
          5060,
          5063,
          5066,
          5069,
          5072,
          5075,
          5078,
          5081
        ]
      }
    ],
    "src": "59:2983:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.4",
  "updatedAt": "2022-05-02T10:47:46.966Z",
  "devdoc": {
    "details": "Interface of an ERC721A compliant contract.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  }
}